linters-settings:
  funlen:
    lines: 350
    statements: 135
  depguard:
    list-type: blacklist
    packages:
      # logging is allowed only by logutils.Log, logrus
      # is allowed to use only in logutils package
      - github.com/sirupsen/logrus
  dupl:
    threshold: 100
  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    errorf: false
    # Permit more than 1 %w verb, valid per Go 1.20 (Requires errorf:true)
    # Default: true
    errorf-multi: true
    # Check for plain type assertions and type switches.
    # Default: true
    asserts: true
    # Check for plain error comparisons.
    # Default: true
    comparison: true
  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map
    # Check switch statements in generated files also.
    # Default: false
    check-generated: true
    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    default-signifies-exhaustive: true
    # Enum members matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness.
    # Default: ""
    ignore-enum-members: "Example.+"
    # Enum types matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness.
    # Default: ""
    ignore-enum-types: "Example.+"
    # Consider enums only in package scopes, not in inner scopes.
    # Default: false
    package-scope-only: true
    # Only run exhaustive check on switches with "//exhaustive:enforce" comment.
    # Default: false
    explicit-exhaustive-switch: false
    # Only run exhaustive check on map literals with "//exhaustive:enforce" comment.
    # Default: false
    explicit-exhaustive-map: false
  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/datatrails/avid) # Custom section: groups all imports with the specified Prefix.
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
      - alias # Alias section: contains all alias imports. This section is not present unless explicitly enabled.
      - localmodule # Local module section: contains all local packages. This section is not present unless explicitly enabled.
    # Skip generated files.
    # Default: true
    skip-generated: false
    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    custom-order: true
  goconst:
    min-len: 2
    min-occurrences: 2
  gocritic:
    enabled-tags:
      - performance
      - style
      - experimental
    disabled-checks:
      - wrapperFunc
  gocognit:
    min-complexity: 75
  gocyclo:
    min-complexity: 10
  goimports:
    local-prefixes: github.com/golangci/golangci-lint
  govet:
    enable-all: true
    disable:
      - fieldalignment
    settings:
      printf:
        funcs:
          - Infof
          - Debugf
          - Panicf
          - Fatalf
  lll:
    line-length: 500
  maligned:
    suggest-new: true
  misspell:
    locale: UK

# depguard (control upstream repos) not needed
# dupl - see ticket #3095
# funlen - it is to anoying for test code and this sort of subjective judgement is what PR reviews are for
# exhaustive - see ticket #3096
# gci - disabled as confusing and not really useful
# gochecknoglobals - not really useful
# goconst - see ticket #3097
# goerr113 - disabled see https://github.com/Djarvur/go-err113/issues/10
# gofumpt - not useful - confusing messages
# nilreturn onwardis not yet evaluated...
# maligned - this guards against performance issues due to accessing
#            mis-aligned structs. We don't have direct evidence of this being a
#            real problem for us. We use a lot of generated code in our hot
#            paths anyway (we have no control over there layout). Until we get
#            direct evidence this is hurting us, we prefer our stucts layed out
#            logically and don't want to have to nolint tag everything.
#
# misspell - expected UK spelling with misspell, but customer facing text needs to be US.
# tagalign - suppress until we can get a golang code formatter that will fix this (cosmetic)
#
# WARN: typecheck cannot be disabled as golang-ci uses it internally to detect uncompilable code.
# Unfortunately the src/azb2c package triggers this erroneously so we add it to skip-dirs below.
#
linters:
  enable-all: true
  disable:
    - canonicalheader
    - containedctx
    - contextcheck
    - cyclop
    - depguard
    - dupl
    - dupword
    - durationcheck
    - err113
    - errchkjson
    - errname
    - exhaustruct
    - forbidigo
    - forcetypeassert
    # DONT re-enable funlen please
    - funlen
    - gci
    - gochecknoglobals
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - gofumpt
    - gomoddirectives
    - gosec
    - gosimple
    - iface
    - inamedparam
    - interfacebloat
    - ireturn
    - maintidx
    - misspell
    - mnd
    - musttag
    - nilerr
    - nilnil
    - nlreturn
    - noctx
    - nestif
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - perfsprint
    - prealloc
    - protogetter
    - recvcheck
    - revive
    - rowserrcheck
    - stylecheck
    - tagalign
    - tagliatelle
    - tenv
    - testifylint
    - testpackage
    - thelper
    - tparallel
    - unparam
    - unused
    - usestdlibvars
    - varnamelen
    - wastedassign
    - whitespace
    - wsl
    - wrapcheck

run:
  build-tags:
    - golangcilint

issues:
  exclude-rules:
    - text: "weak cryptographic primitive"
      linters:
        - gosec
